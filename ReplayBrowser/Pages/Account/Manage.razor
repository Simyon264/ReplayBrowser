@page "/account/manage"
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore
@using ReplayBrowser.Data
@using ReplayBrowser.Data.Models.Account
@using ReplayBrowser.Helpers
@using ReplayBrowser.Services
@using Action = ReplayBrowser.Data.Models.Account.Action
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@attribute [Authorize]
@inject AccountService AccountService
@inject ReplayDbContext ReplayDbContext

<PageTitle>Manage Account</PageTitle>

<h3>Manage Account</h3>

@if(ErrorMessage != null)
{
    <div class="alert alert-danger" role="alert">
        Error:
        @ErrorMessage
    </div>
}
else if (account != null)
{
    @if(ChangeSaved)
    {
        <div class="alert alert-success" role="alert">
            Changes saved
        </div>
    }

    <p>Username: @account.Username</p>
    <p>Guid: @account.Guid</p>

    <h4>Settings</h4>

    // Toggle for redacting account
    <em>Redacting an account will mean, that only you will be able to see and search for you in replays.</em>
    <p>Redact Account: @if (account.Settings.RedactInformation)
                       {
                           <input type="checkbox" id="redact" checked/>
                       }
                       else
                       {
                           <input type="checkbox" id="redact"/>
                       }</p>

    // Webhook management
    <h4>Webhooks</h4>
    <button class="btn btn-primary" type="button" id="addwebhook" style="margin-bottom: 12px">Add webhook</button>
    <WebhookComponent Webhook="new Webhook()" Template="true"/>
    <div id="webhooks">
        @foreach (var webhook in account.Webhooks)
        {
            <WebhookComponent Webhook="webhook"/>
        }
    </div>

    <br/>
    <br/>

    <button class="btn btn-primary" id="save">Save</button>

    <br/>
    <br/>

    <h4>Account Actions</h4>

    // Collapse for deleting account
    <button class="btn btn-danger" type="button" data-bs-toggle="collapse" data-bs-target="#deleteAccount" aria-expanded="false" aria-controls="deleteAccount">
        Delete Account
    </button>

    <div class="collapse" id="deleteAccount">
        <div class="card card-body">
            <p>Are you sure you want to delete your account? This action is irreversible and will delete all your settings and all other data related to your account.</p>
            <button class="btn btn-danger" id="deleteAccount">Delete Account</button>
        </div>
    </div>

    // Collapse for permanently deleting account
    <button class="btn btn-danger" type="button" data-bs-toggle="collapse" data-bs-target="#deleteAccountPermanently" aria-expanded="false" aria-controls="deleteAccountPermanently">
        Delete Account Permanently And Remove All Data From Replays
    </button>

    <div class="collapse" id="deleteAccountPermanently">
        <div class="card card-body">
            <p>Are you sure you want to delete your account? This action is <b>irreversible</b> and will delete all your settings and all other data related to your account.</p>
            <b>Furthermore, all replays that have your name in them will have your name removed from them. This cannot be undone.</b>
            <button class="btn btn-danger" id="deleteAccountPermanently">Delete Account Permanently</button>
        </div>
    </div>

    // Download data
    <a class="btn btn-primary" href="/account/download" target="_blank">Download Account Data</a>
}
else
{
    <p>Account not found (how did you get here?)</p>
}

<style>
    .webhook {
        margin-bottom: 6px;
    }
</style>

<script>
    $(document).ready(function() {
        $("#save").click(function() {
            let redact = $("#redact").is(":checked");
            let uri = new URL(window.location.href);
            uri.searchParams.set("redact", redact);

            let webhooks = [];
            $("#webhooks .webhook").each(function() {
                let webhook = {};
                webhook.url = $(this).find(".url").val();
                webhook.type = $(this).find(".dropdown-toggle").text();
                webhook.servers = $(this).find(".servers").val();
                webhooks.push(webhook);
            });

            uri.searchParams.set("webhooks", JSON.stringify(webhooks));

            window.location.href = uri;
        });

        $("#deleteAccount").click(function() {
            if (confirm("Are you sure you want to delete your account? This action is irreversible and will delete all your settings and all other data related to your account."))
            {
                window.location.href = "/account/delete";
            }
        });

        $("#deleteAccountPermanently").click(function() {
            if (confirm("This will remove you permanently from all replays. Are you sure? Even you will not be able to search for yourself in replays anymore. This action is irreversible and will delete all your settings and all other data related to your account."))
            {
                window.location.href = "/account/delete?permanently=true";
            }
        });

        $("#addwebhook").click(function() {
            // Template is a webhook object with "hidden" class
            let template = $(".webhook.hidden").clone();
            template.removeClass("hidden");
            $("#webhooks").append(template);
        });
    });

    function deleteWebhook(button) {
        let webhook = button.closest(".webhook");
        webhook.remove();
    }

    function changeType(dropdownElement, type) {
        let webhook = dropdownElement.closest(".card-body");
        let button = webhook.querySelector(".dropdown-toggle");
        button.innerHTML = type;
    }
</script>

@code {
    private Account? account;
    private bool ChangeSaved = false;
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var guid = AccountHelper.GetAccountGuid(authState);
        if (guid == null)
        {
            ErrorMessage = "Account not found, please go to the home page and then try again. How did you get here?";
            return;
        }
        account = await ReplayDbContext.Accounts
            .Include(x => x.Webhooks)
            .Include(a => a.Settings)
            .FirstOrDefaultAsync(x => x.Guid == guid);

        if (account == null)
        {
            ErrorMessage = "Account not found, please go to the home page and then try again. How did you get here?";
            return;
        }

        var uri = new Uri(NavigationManager.Uri);
        var query = uri.Query;
        var queryDictionary = System.Web.HttpUtility.ParseQueryString(query);
        var oldAccountSettings = account.Settings.Clone();

        // Basically, clicking on "save" will redirect to the same page with the current account settings put into the query string
        // these will then be compared to the current account settings and if they are different, the account will be updated
        if (queryDictionary.Count == 0)
            return;

        var redact = queryDictionary["redact"];
        var webhooks = queryDictionary["webhooks"];
        var changes = 0;
        if (redact != null)
        {
            var valueRedact = bool.Parse(redact);
            if (account.Settings.RedactInformation != valueRedact)
            {
                account.Settings.RedactInformation = valueRedact;
                changes++;
            }
        }

        if (webhooks != null)
        {
            var valueWebhooks = JsonSerializer.Deserialize<List<JsonElement>>(webhooks);
            if (valueWebhooks != null)
            {
                await AccountService.AddHistory(account, new HistoryEntry()
                {
                    Action = Enum.GetName(typeof(Action), Action.WebhooksChanged) ?? "Unknown",
                    Time = DateTime.UtcNow,
                    Details = $"Old webhooks: {JsonSerializer.Serialize(account.Webhooks)} New webhooks: {JsonSerializer.Serialize(valueWebhooks)}",
                });
                account.Webhooks.Clear();
                await ReplayDbContext.SaveChangesAsync();

                var webhookList = new List<Webhook>();
                foreach (var webhook in valueWebhooks)
                {
                    var url = webhook.GetProperty("url").GetString();
                    var type = webhook.GetProperty("type").GetString();
                    var servers = webhook.GetProperty("servers").GetString();
                    if (url == null || type == null || servers == null)
                        continue;

                    var enumParsed = Enum.TryParse<WebhookType>(type, out var webhookType);
                    if (!enumParsed)
                        continue;

                    webhookList.Add(new Webhook()
                    {
                        Url = url,
                        Type = webhookType,
                        Servers = servers,
                    });
                }

                account.Webhooks = webhookList;

                changes++;
            }
        }

        if (changes == 0)
            return;

        await AccountService.AddHistory(account, new HistoryEntry()
        {
            Action = Enum.GetName(typeof(Action), Action.AccountSettingsChanged) ?? "Unknown",
            Time = DateTime.UtcNow,
            Details = $"Old settings: {JsonSerializer.Serialize(oldAccountSettings)} New settings: {JsonSerializer.Serialize(account.Settings)}",
        });

        await AccountService.UpdateAccount(account);
        ChangeSaved = true;
    }
}