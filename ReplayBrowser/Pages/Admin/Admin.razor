@page "/account/admin"
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using ReplayBrowser.Data.Models.Account
@using ReplayBrowser.Services
@using Microsoft.AspNetCore.Components.Web
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AccountService AccountService
@attribute [Authorize]

<PageTitle>Admin</PageTitle>

<h3>Listing all accounts:</h3>
@if (_isNotAdmin)
{
    <p>You are not an admin.</p>
}
else if (_isLoading)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Username</th>
            <th>Guid</th>
            <th>IsAdmin</th>
            <th>IsRedacted</th>
            <th>Logs</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var account in _accounts)
            {
                <tr>
                    <td>@account.Id</td>
                    <td>@account.Username</td>
                    <td>@account.Guid</td>
                    <td>@account.IsAdmin</td>
                    <td>@account.Settings.RedactInformation</td>
                    <td><a href="/account/logs?username=@account.Username">Logs</a></td>
                </tr>
            }
        </tbody>
    </table>

    // GDPR compliance
    <p>Putting in a guid in this field will delete and permanently remove any and all replay data associated with the
    account.</p>
    <input type="text" id="deleteGuid" placeholder="Guid" class="form-control" />
    <button id="deleteAccountButton" class="btn btn-primary">Delete account (gdpr)</button>
    <button id="getAccountData" class="btn btn-primary">Download account data</button>
    <button id="deleteAccountNonGdpr" class="btn btn-primary">Delete account (non-gdpr)</button>

                // Protected account stuff
    <p>Add a new account for protection. Put in a Username and that account will "log in" and have their redaction set to
    true.</p>
    <input type="text" id="newAccountUsername" placeholder="Username" class="form-control" />
    <button id="addProtectedAccount" class="btn btn-primary">Add protected account</button>
}

<script>
    $(document).ready(function () {
        $('#deleteAccountButton').click(function () {
            const guid = $('#deleteGuid').val();
            if (guid === '') {
                alert('Guid cannot be empty.');
                return;
            }

            if (!confirm('Are you sure you want to delete the account?')) {
                return;
            }

            $.ajax({
                url: '/account/delete-admin?guid=' + guid,
                type: 'POST',
                contentType: 'application/json',
                success: function () {
                    alert('Account deleted.');
                },
                error: function () {
                    alert('Failed to delete account.');
                }
            });
        });

        $('#getAccountData').click(function () {
            const guid = $('#deleteGuid').val();
            if (guid === '') {
                alert('Guid cannot be empty.');
                return;
            }

            // Open a new tab with the account data
            window.open('/account/download-data-admin?guid=' + guid, '_blank');
        });

        $('#deleteAccountNonGdpr').click(function () {
            const guid = $('#deleteGuid').val();
            if (guid === '') {
                alert('Guid cannot be empty.');
                return;
            }

            if (!confirm('Are you sure you want to delete the account?')) {
                return;
            }

            $.ajax({
                url: '/account/delete-admin-non-gdpr?guid=' + guid,
                type: 'POST',
                contentType: 'application/json',
                success: function () {
                    alert('Account deleted.');
                },
                error: function () {
                    alert('Failed to delete account.');
                }
            });
        });

        $('#addProtectedAccount').click(function () {
            const username = $('#newAccountUsername').val();
            if (username === '') {
                alert('Username cannot be empty.');
                return;
            }

            $.ajax({
                url: '/account/add-protected-account?username=' + username,
                type: 'POST',
                contentType: 'application/json',
                success: function () {
                    alert('Account added.');
                },
                error: function () {
                    alert('Failed to add account.');
                }
            });
        });
    });
</script>

@code
{
    private List<Account> _accounts = [];
    private bool _isNotAdmin = false;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await AccountService.GetAccount(authState);

        if (user == null || !user.IsAdmin)
        {
            _isNotAdmin = true;
            _isLoading = false;
            return;
        }

        _accounts = await AccountService.GetAllAccounts();
        _accounts = _accounts.OrderBy(x => x.Id).ToList();
        _isLoading = false;
    }
}
