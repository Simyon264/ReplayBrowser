@using System.Text.RegularExpressions
@using Humanizer.Bytes
@using ReplayBrowser.Data
@using ReplayBrowser.Data.Models
@using ReplayBrowser.Models
@using ReplayBrowser.Services.ReplayParser
@inject ReplayParserService ReplayParserService

@if(Replay != null)
{
    <h2>@NameFormatted</h2>
    @if (Replay.Map == null)
    {
        <p>Maps: @string.Join(", ", Replay.Maps!)</p>
    }
    else
    {
        <p>Map: @Replay.Map</p>
    }
    <p>Duration: @Replay.Duration</p>
    <p>Date: @DateFormatted</p>
    <p>Server ID: @Replay.ServerId</p>
    <p>Server Name: @Replay.ServerName</p>
    <p>Round ID: @Replay.RoundId</p>
    <p>Gamemode: @Replay.Gamemode</p>
    <p>Download Size: @ByteSize.FromBytes(Replay.Size).ToString()</p>
    <p>Uncompressed Size: @ByteSize.FromBytes(Replay.UncompressedSize).ToString()</p>

    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalEndText-@Replay.Id" id="buttonEndText-@Replay.Id">
        View Round End Text
    </button>
    <div class="modal fade modal-lg" id="modalEndText-@Replay.Id" tabindex="-1" aria-labelledby="modalEndText-@Replay.Id" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Round End Text</h5>
                     @if(RequestModal != null)
                     {
                         <button class="btn-close" data-bs-target="#@RequestModal" data-bs-toggle="modal"></button>
                     } else
                     {
                         <button class="btn-close" data-bs-dismiss="modal"></button>
                     }
                </div>
                <div class="modal-body">
                    @if (FullReplay is not null && FullReplay.RoundEndText is not null)
                    {
                        <p id="endText-@Replay.Id">@ReplayEndTextFormatted</p>
                    } else
                    {
                        <p id="endText-@Replay.Id">Loading...</p>
                    }
                </div>
                @if(RequestModal != null)
                {
                    <div class="modal-footer">
                        <button class="btn btn-primary" data-bs-target="#@RequestModal" data-bs-toggle="modal">
                            Return
                        </button>
                    </div>
                } else
                {
                    <div class="modal-footer">
                        <button class="btn btn-primary" data-bs-dismiss="modal">
                            Close
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalPlayers-@Replay.Id" id="buttonPlayers-@Replay.Id">
        View Players
    </button>
    <div class="modal fade modal-lg" id="modalPlayers-@Replay.Id" tabindex="-1" aria-labelledby="modalPlayers-@Replay.Id" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Players</h5>
                    @if(RequestModal != null)
                    {
                        <button class="btn-close" data-bs-target="#@RequestModal" data-bs-toggle="modal"></button>
                    } else
                    {
                        <button class="btn-close" data-bs-dismiss="modal"></button>
                    }
                </div>
                <div class="modal-body">
                    @if (FullReplay is not null && FullReplay.RoundParticipants is not null)
                    {
                        <p id="players-@Replay.Id">@ReplayPlayersFormatted</p>
                    } else
                    {
                        <p id="players-@Replay.Id">Loading...</p>
                    }
                </div>
                @if(RequestModal != null)
                {
                    <div class="modal-footer">
                        <button class="btn btn-primary" data-bs-target="#@RequestModal" data-bs-toggle="modal">
                            Return
                        </button>
                    </div>
                } else
                {
                    <div class="modal-footer">
                        <button class="btn btn-primary" data-bs-dismiss="modal">
                            Close
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalTimeline-@Replay.Id" id="buttonTimeline-@Replay.Id">
        View Timeline
    </button>
    <div class="modal fade modal-lg" id="modalTimeline-@Replay.Id" tabindex="-1" aria-labelledby="modalTimeline-@Replay.Id" aria-hidden="true" style="--bs-modal-width: 2000px;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Events</h5>
                    @if(RequestModal != null)
                    {
                        <button class="btn-close" data-bs-target="#@RequestModal" data-bs-toggle="modal"></button>
                    } else
                    {
                        <button class="btn-close" data-bs-dismiss="modal"></button>
                    }
                </div>
                <div class="modal-body">
                    <div>
                        <div id="timeline-@Replay.Id"></div>
                        <div id="timelineDetails-@Replay.Id"></div>
                    </div>
                </div>
                @if(RequestModal != null)
                {
                    <div class="modal-footer">
                        <button class="btn btn-primary" data-bs-target="#@RequestModal" data-bs-toggle="modal">
                            Return
                        </button>
                    </div>
                } else
                {
                    <div class="modal-footer">
                        <button class="btn btn-primary" data-bs-dismiss="modal">
                            Close
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>

    <a href="@Replay.Link" target="_blank" class="btn btn-primary">Download</a>


    @if (FullReplay is null || FullReplay.RoundParticipants is null || FullReplay.RoundEndText is null || FullReplay.Events is null) {
        <script>
    document.addEventListener('DOMContentLoaded', function() {
        const modalPlayers = document.getElementById("buttonPlayers-@Replay.Id")
        modalPlayers.addEventListener('click', function() {
            const players = document.getElementById("players-@Replay.Id");
            const endTextElement = document.getElementById("endText-@Replay.Id");
            // Do an HTTP request to get the replay
            if (players.innerHTML == "Loading...")
                loadDetails(players, endTextElement, @Replay.Id);
        });

        const modalEndText = document.getElementById("buttonEndText-@Replay.Id")
        modalEndText.addEventListener('click', function() {
            const players = document.getElementById("players-@Replay.Id");
            const endTextElement = document.getElementById("endText-@Replay.Id");
            // Do an HTTP request to get the replay
            if (endTextElement.innerHTML == "Loading...")
                loadDetails(players, endTextElement, @Replay.Id);
        });

        const modalTimeline = document.getElementById("buttonTimeline-@Replay.Id")
        modalTimeline.addEventListener('click', function() {
            const timeline = document.getElementById("timeline-@Replay.Id");
            const timelineDetails = document.getElementById("timelineDetails-@Replay.Id");
            if (timeline.innerHTML == "")
                loadTimeline(timeline, @Replay.Id, timelineDetails);
        });
    });
    </script>
    }
} else
{
    <p>Oops! This component is missing a replay. Please report this to the developers.</p>
}

@code {
    [Parameter]
    public ReplayResult? Replay { get; set; }

    [Parameter]
    public Replay? FullReplay { get; set; }

    [Parameter]
    public string? RequestModal { get; set; }

    public MarkupString ReplayEndTextFormatted { get; set; } = new MarkupString("");
    public MarkupString ReplayPlayersFormatted { get; set; } = new MarkupString("");
    public string NameFormatted { get; set; } = "";
    public string DateFormatted { get; set; } = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (Replay is null && FullReplay is not null)
            Replay = FullReplay.ToResult();

        if (Replay == null)
            return;


        if (Replay.Date != null)
        {
            DateFormatted = Replay.Date.Value.ToString("yyyy-MM-dd");
        }
        else
        {
            DateFormatted = "Unknown";
        }

        if (Replay.ServerName is null)
        {
            Replay.ServerName = "Unknown";
        }

        if (FullReplay is not null) {
            var text = FullReplay.RoundEndText ?? "No round end text available.";

            const string colorTagPattern = @"\[color=(.*?)\](.*?)\[/color\]";
            const string colorTagReplacement = "<span style=\"color:$1\">$2</span>";

            const string boldTagPattern = @"\[bold\](.*?)\[/bold\]";
            const string boldTagReplacement = "<strong>$1</strong>";

            text = Regex.Replace(text, colorTagPattern, colorTagReplacement);
            text = text.Replace("\n", "<br>");
            text = Regex.Replace(text, boldTagPattern, boldTagReplacement);

            ReplayEndTextFormatted = new MarkupString(text);
        }

        // Format the player list
        if (FullReplay is not null && FullReplay.RoundParticipants is not null)
        {
            var players = FullReplay.RoundParticipants.SelectMany(p => p.Players!.Select(c => new {
                    Player = c, p.PlayerGuid, p.Username
                })).ToList();

            players.Sort((a, b) =>
            {
                if (a.Player.AntagPrototypes.Count > 0 && b.Player.AntagPrototypes.Count == 0)
                {
                    return -1;
                } else if (a.Player.AntagPrototypes.Count == 0 && b.Player.AntagPrototypes.Count > 0)
                {
                    return 1;
                }
                return 0;
            });

            // Antags are placed at the top
            var playerList = players.Select(player => {
                var job = "Unknown";
                if (player.Player.JobPrototypes.Count > 0)
                {
                    job = player.Player.JobPrototypes[0];
                }

                var playerText = $"<a href=\"/player/{player.PlayerGuid}\"><span style=\"color: gray\">{player.Username}</span></a> was <bold>{player.Player.PlayerIcName}</bold> playing role of <span style=\"color: orange\"><bold>{job}</bold></span>";
                if (player.Player.AntagPrototypes.Count > 0)
                {
                    playerText = $"<a href=\"/player/{player.PlayerGuid}\"><span style=\"color: red\">{player.Username}</span></a> was <span style=\"color:red\"><bold>{player.Player.PlayerIcName}</bold></span> playing role of <span style=\"color: orange\"><bold>{job}</bold></span>";
                }
                // Need to show the guid as well
                playerText += $"<br><span style=\"color: gray;font-size: x-small;\"> {{{player.PlayerGuid}}}</span>";

                return playerText;
            });

            ReplayPlayersFormatted = new MarkupString(string.Join("<br>", playerList));
        }

        var fileName = Path.GetFileName(Replay.Link);
        if (fileName == null)
        {
            return;
        }

        var storageUrl = ReplayParserService.GetStorageUrlFromReplayLink(Replay.Link);
        var matchName = storageUrl.ServerNameRegexCompiled.Match(fileName);
        var matchDate = storageUrl.ReplayRegexCompiled.Match(fileName);
        if (matchName.Success && matchDate.Success)
        {
            NameFormatted = $"{matchName.Groups[1].Value} - {matchDate.Groups[1].Value.Replace("_","-")}";
            DateFormatted = matchDate.Groups[1].Value.Replace("_", "-");
            if (string.IsNullOrWhiteSpace(matchName.Groups[1].Value))
            {
                NameFormatted = $"{Replay.ServerId} - {matchDate.Groups[1].Value}";
            }
            else
            {
                NameFormatted = $"{matchName.Groups[1].Value} - {matchDate.Groups[1].Value}";
            }
        }
        else
        {
            NameFormatted = Replay.ServerName ?? Replay.ServerId;
        }
    }
}