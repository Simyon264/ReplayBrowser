@using Microsoft.AspNetCore.Components.Authorization
@using ReplayBrowser.Data
@using ReplayBrowser.Data.Models
@using ReplayBrowser.Helpers
@using ReplayBrowser.Models
@using ReplayBrowser.Services
@using ReplayBrowser.Services.ReplayParser
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ReplayHelper ReplayHelper
@inject AccountService AccountService
@inject ReplayParserService ReplayParserService

<div class="card" style="width: 18rem; margin-top: 1rem">
    <div class="card-body">
        <h5 class="card-title">@_nameFormatted</h5>
        @if (ReplayData.Map == null)
        {
        <p>Maps: @string.Join(", ", ReplayData.Maps!)</p>
        }
        else
        {
        <p>Map: @ReplayData.Map</p>
        }
        <p class="card-text">Gamemode: @ReplayData.Gamemode</p>
    </div>
    <div class="card-footer">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#r-@ReplayData.Id" style="margin-right: 0.1rem">
            View replay
        </button>
        <a class="btn btn-secondary" style="margin-right: 0.1rem" href="/replay/@ReplayData.Id" target="_blank">View in new tab</a>

        <button class="btn btn-outline-danger" style="float: right; margin-top: 10px; margin-right: 0;" id="favorite-button-@ReplayData.Id" onclick="FavouriteReplay(@ReplayData.Id, @ReloadOnFavourite.ToString().ToLower())">
            @if (ReplayData.IsFavorite)
            {
                <i class="fas fa-star"></i>
                <p>Remove from favorites</p>
            }
            else
            {
                <i class="far fa-star"></i>
                <p>Add to favorites</p>
            }
        </button>
    </div>
</div>
<div class="modal fade modal-lg" id="@ModalId" tabindex="-1" aria-labelledby="@ModalId" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <ReplayDetails Replay="ReplayData" RequestModal="@ModalId"/>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <a class="btn btn-primary" href="/replay/@ReplayData.Id" target="_blank">View in new tab</a>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public required ReplayResult ReplayData { get; set; }

    [Parameter]
    public bool ReloadOnFavourite { get; set; } = false;

    private string? _nameFormatted;
    private string ModalId => $"r-{ReplayData.Id}";

    protected override async void OnInitialized()
    {
        await base.OnInitializedAsync();
        // Get the date and server name of the replay using regex
        var fileName = Path.GetFileName(ReplayData.Link);
        if (fileName == null)
        {
            return;
        }
        var storageUrl = ReplayParserService.GetStorageUrlFromReplayLink(ReplayData.Link);
        var matchName = storageUrl.ServerNameRegexCompiled.Match(fileName);
        var matchDate = storageUrl.ReplayRegexCompiled.Match(fileName);
        if (matchName.Success && matchDate.Success)
        {
            if (string.IsNullOrWhiteSpace(matchName.Groups[1].Value))
            {
                // wut? Fallback to server id
                _nameFormatted = $"{ReplayData.ServerId} - {matchDate.Groups[1].Value}";
            }
            else
            {
                _nameFormatted = $"{matchName.Groups[1].Value} - {matchDate.Groups[1].Value}";
            }
        }
        else
        {
            if (ReplayData.ServerName != null)
            {
                _nameFormatted = ReplayData.ServerName;
            }
            else
            {
                _nameFormatted = ReplayData.ServerId;
            }
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var account = await AccountService.GetAccount(authState);
        if (account == null)
        {
            return;
        }

        ReplayData.IsFavorite = account.FavoriteReplays.Contains(ReplayData.Id);
    }
}