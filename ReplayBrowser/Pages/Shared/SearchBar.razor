@using Humanizer
@using Microsoft.Extensions.Configuration
@using ReplayBrowser.Data
@using ReplayBrowser.Models
@inject IConfiguration Configuration

@{
    var searchModes = Enum.GetValues(typeof(SearchMode)).Cast<SearchMode>().ToList();
    <div class="search-bar">
        <div class="d-flex ms-auto hidden prefab search-form">
            <input
                type="text"
                class="form-control"
                placeholder="Search for a replay..."
                aria-label="Search"
                data-filter="/api/Data/username-completion?username=#QUERY#"
            >
            <button class="btn-secondary btn dropdown-toggle" type="button" style="margin-left: 1rem; margin-right: 1rem;" data-bs-toggle="dropdown" aria-expanded="false">
                @SearchMode.PlayerOocName.Humanize()
            </button>
            <ul class="dropdown-menu no-affect">
                @foreach (var mode in searchModes)
                {
                    <li><a class="dropdown-item">@mode.Humanize()</a></li>
                }
            </ul>
            <div class="search-container">
                <button class="btn btn-outline-danger remove-bar">
                    -
                </button>
                <button class="btn btn-outline-primary" type="button" onclick="moveUp(this)">
                    ↑
                </button>
                <button class="btn btn-outline-primary" type="button" onclick="moveDown(this)">
                    ↓
                </button>
            </div>
        </div>
    </div>

    <div class="d-flex" style="margin-top: 1rem;">
        <button class="btn btn-outline-primary" style="margin-right: 1rem" type="button" id="addSearchBar">
            +
        </button>
        <button class="btn btn-outline-success" type="button" onclick="search(0)">Search</button>
    </div>
}

<style>
    /* this is a bit stupid
        so. the autocomplete plugin uses a div dropdown right? but that dropdown is placed directly ON the input,
        we want to move it down, but dont want to move the no-affect dropdown, so we move EVERY dropdown down, but not the no-affect one
     */
    .dropdown-menu {
        margin-top: 2.5rem;
    }

    .no-affect {
        margin-top: 0;
    }

    .hidden {
        display: none !important;
    }

    .btn {
        margin-right: 0.5rem;
    }

    .search-bar .search-form {
        margin-bottom: 1rem;
        max-height: 3rem;
    }

    .search-container {
        display: flex;
        flex-direction: row;
    }

    @@media (max-width: 768px) {
        .search-bar .search-form {
            flex-direction: column !important;
        }

        .search-form {
            margin-bottom: 6rem !important;
        }

        .search-bar input {
            font-size: 18px !important;
            margin-bottom: 10px !important;
        }

        .btn {
            margin-bottom: 10px !important;
        }

        .dropdown-menu {
            font-size: 18px !important;
        }
    }
</style>

<script>
    let selectedAutocompleteOption = null;

    function moveUp(element) {
        const parent = element.parentElement.parentElement;
        const previousElement = parent.previousElementSibling;
        if (previousElement !== null) {
            parent.parentNode.insertBefore(parent, previousElement);
        }
    }

    function moveDown(element) {
        const parent = element.parentElement.parentElement;
        const nextElement = parent.nextElementSibling;
        if (nextElement !== null) {
            parent.parentNode.insertBefore(nextElement, parent);
        }
    }

    function search(page) {
        const searchBars = document.querySelectorAll('.search-bar input');

        // sanity check
        if(page === null) page = 0;

        const builder = new URLSearchParams();
        let searches = []
        searchBars.forEach((searchBar, index) => {
            const searchMode = searchBar.parentElement.querySelector('.dropdown-toggle').textContent;
            const searchValue = searchBar.value;
            if (searchValue !== '') {
                searches.push({
                    searchMode: searchMode,
                    searchValue: searchValue
                });
            }
        });

        // Remove duplicates
        searches = searches.filter((search, index, self) =>
            index === self.findIndex((t) => (
                t.searchMode === search.searchMode && t.searchValue === search.searchValue
            ))
        );

        // Encode the searches as base64
        const encodedSearches = btoa(JSON.stringify(searches));
        builder.append('searches', encodedSearches);
        builder.append('page', page);

        window.location.href = `/search?${builder.toString()}`
    }

    document.getElementById('addSearchBar').addEventListener('click', () => {
        const searchBarPrefab = document.getElementsByClassName('prefab');
        const newSearchBar = searchBarPrefab[0].cloneNode(true);
        newSearchBar.classList.remove('hidden');
        newSearchBar.classList.remove('prefab');
        document.querySelector('.search-bar').appendChild(newSearchBar);

        // add autocomplete on newSearchBar only using $.autocomplete
        $(newSearchBar.querySelector('input')).autocomplete({
            onItemRendered(el, item) {
                const currentSelectedSearchMode = newSearchBar.querySelector('.dropdown-toggle').textContent;
                if (currentSelectedSearchMode !== "@SearchMode.PlayerOocName.Humanize()") {
                    // Currently, autocomplete only supports searching for player names. So delete the item
                    item.remove();
                }
            },
            onPick(el, item) {
                selectedAutocompleteOption = item.innerHTML;
                // if we are the last search bar and we have a selected option, search
                if (newSearchBar === document.querySelector('.search-bar').lastElementChild && selectedAutocompleteOption !== null) {
                    document.querySelector('.search-bar input').value = selectedAutocompleteOption;
                    search(0)
                }
            }
        });


        const dropdown = newSearchBar.querySelector('.dropdown-menu');
        dropdown.addEventListener('click', (e) => {
            const text = e.target.textContent;
            e.target.closest('.d-flex').querySelector('.dropdown-toggle').textContent = text;
        });

        // enter key listener
        newSearchBar.querySelector('input').addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.defaultPrevented) {
                search(0);
            }
        });
    });

    document.addEventListener('click', (e) => {
        if (e.target.classList.contains('remove-bar')) {
            e.target.parentElement.parentElement.remove();
        }
    });

    // event listener to track selected autocomplete option
    $('#search').on('autocomplete:selected', function (event, suggestion, dataset) {
        selectedAutocompleteOption = suggestion;
    });

    document.addEventListener('DOMContentLoaded', e => {
        // Based on the current query, if we have anything loaded already in the query, create search bars based on that, otherwise if its empty, create a new one
        const searchParams = new URLSearchParams(window.location.search);
        const searches = searchParams.get('searches');
        if (searches !== null) {
            const decodedSearches = JSON.parse(atob(searches));
            decodedSearches.forEach(searchObject => {
                const searchBarPrefab = document.getElementsByClassName('prefab');
                const newSearchBar = searchBarPrefab[0].cloneNode(true);
                newSearchBar.classList.remove('hidden');
                newSearchBar.classList.remove('prefab');
                document.querySelector('.search-bar').appendChild(newSearchBar);
                // autocomplete
                $(newSearchBar.querySelector('input')).autocomplete({
                    onItemRendered(el, item) {
                        const currentSelectedSearchMode = newSearchBar.querySelector('.dropdown-toggle').textContent;
                        if (currentSelectedSearchMode !== "@SearchMode.PlayerOocName.Humanize()") {
                            // Currently, autocomplete only supports searching for player names. So delete the item
                            item.remove();
                        }
                    },
                    onPick(el, item) {
                        selectedAutocompleteOption = item.innerHTML;
                        // if we are the last search bar and we have a selected option, search
                        if (newSearchBar === document.querySelector('.search-bar').lastElementChild && selectedAutocompleteOption !== null) {
                            document.querySelector('.search-bar input').value = selectedAutocompleteOption;
                            search(0)
                        }
                    }
                });

                const dropdown = newSearchBar.querySelector('.dropdown-menu');
                dropdown.addEventListener('click', (e) => {
                    const text = e.target.textContent;
                    e.target.closest('.d-flex').querySelector('.dropdown-toggle').textContent = text;
                });

                // enter key listener
                newSearchBar.querySelector('input').addEventListener('keypress', (e) => {
                    if (e.key === 'Enter' && !e.defaultPrevented) {
                        search(0);
                    }
                });

                newSearchBar.querySelector('.dropdown-toggle').textContent = searchObject.searchMode;
                newSearchBar.querySelector('input').value = searchObject.searchValue;
            });
        } else {
            document.getElementById('addSearchBar').click();
        }
    }, false);
</script>