@using Humanizer
@using Microsoft.Extensions.Configuration
@using ReplayBrowser.Data
@inject IConfiguration Configuration

@{
    var searchModes = Enum.GetValues(typeof(SearchMode)).Cast<SearchMode>().ToList();
    <div class="search-bar">
        <div class="d-flex ms-auto">
            <input 
                type="text" 
                class="form-control" 
                placeholder="Search for a replay..." 
                onsubmit="search()" 
                aria-label="Search"
                data-filter="/api/Data/username-completion?username=#QUERY#"
                id="search"
                >
            <button class="btn-secondary btn dropdown-toggle" type="button" id="searchModeButton" style="margin-left: 1rem; margin-right: 1rem;" data-bs-toggle="dropdown" aria-expanded="false">
                @SearchMode.PlayerOocName.Humanize()
            </button>
            <ul class="dropdown-menu no-affect">
                @foreach (var mode in searchModes)
                {
                    <li><a class="dropdown-item">@mode.Humanize()</a></li>
                }
            </ul>
            <button class="btn btn-outline-success" type="button" onclick="search(0)">Search</button>
        </div>
    </div>
}

<style>
    /* this is a bit stupid
        so. the autocomplete plugin uses a div dropdown right? but that dropdown is placed directly ON the input, 
        we want to move it down, but dont want to move the no-affect dropdown, so we move EVERY dropdown down, but not the no-affect one
     */
    .dropdown-menu {
        margin-top: 2.5rem;
    }
    
    .no-affect {
        margin-top: 0;
    }
</style>

<script>

    let selectedAutocompleteOption = null;
    
    // This is a script to make the dropdown change the text of the button
    const dropdowns = document.querySelectorAll('.dropdown-menu a');
    dropdowns.forEach((dropdown) => {
        dropdown.addEventListener('click', (e) => {
            const text = e.target.textContent;
            document.getElementById('searchModeButton').textContent = text;
        });
    });

    // event listener to track selected autocomplete option
    $('#search').on('autocomplete:selected', function (event, suggestion, dataset) {
        selectedAutocompleteOption = suggestion;
    });
        
    function search(page) {
        const searchMode = document.getElementById('searchModeButton').textContent;
        const searchText = document.querySelector('.search-bar input').value;

        // sanity check
        if(page === null) page = 0;
        
        const builder = new URLSearchParams();
        builder.append('mode', searchMode);
        builder.append('query', searchText);
        builder.append('page', page);
        window.location.href = '/search?' + builder.toString();
    }

    document.querySelector('.search-bar input').addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.defaultPrevented) {)
            search(0);
        }
    });
    
    // Set the content of the search mode button to the value of the search mode
    document.getElementById('searchModeButton').textContent = new URLSearchParams(window.location.search).get('mode');
    
    // Set the value of the search input to the value of the query
    document.querySelector('.search-bar input').value = new URLSearchParams(window.location.search).get('query');
    
    document.addEventListener('DOMContentLoaded', e => {
        $('#search').autocomplete({
            onItemRendered(el, item) {
                const currentSelectedSearchMode = document.getElementById('searchModeButton').textContent;
                if (currentSelectedSearchMode !== "@SearchMode.PlayerOocName.Humanize()") {
                    // Currently, autocomplete only supports searching for player names. So delete the item
                    item.remove();
                }   
            },
            onPick(el, item) {
                selectedAutocompleteOption = item.innerHTML;
                document.querySelector('.search-bar input').value = selectedAutocompleteOption;
                search(0)
            }
        })
    }, false);
</script>