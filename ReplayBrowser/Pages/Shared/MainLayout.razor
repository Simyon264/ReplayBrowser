@using Microsoft.AspNetCore.Components.Authorization
@using ReplayBrowser.Data
@using ReplayBrowser.Data.Models.Account
@using ReplayBrowser.Helpers
@using ReplayBrowser.Services
@using ReplayBrowser.Services.ReplayParser
@using Serilog
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ReplayDbContext DbContext
@inject NavigationManager NavigationManager
@inject NoticeHelper NoticeHelper
@inject IHttpContextAccessor HttpContextAccessor
@inject ProfilePregeneratorService ProfilePregeneratorService

@code
{
    private System.Security.Claims.ClaimsPrincipal _user;
    private Account? _account;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _user = authState.User;
        if (_user.Identity.IsAuthenticated)
        {
            var guid = (Guid)AccountHelper.GetAccountGuid(authState)!;
            _account = DbContext.Accounts.FirstOrDefault(a => a.Guid == guid);
            if (_account == null)
            {
                Log.Error("Account {Guid} is authenticated but not found in the database", guid);
                NavigationManager.NavigateTo("account/redirect", new NavigationOptions()
                {
                    ForceLoad = true
                });
            }
        }
    }
}

<div id="modal-root">

</div>

<div class="page">
    <main class="container my-5">
        @foreach (var activeNotice in NoticeHelper.GetActiveNotices())
        {
            // See in cookies if we have already dismissed this notice
            var dismissed = HttpContextAccessor.HttpContext != null && HttpContextAccessor.HttpContext.Request.Cookies.ContainsKey($"dismissed-notice-{activeNotice.Id}");
            if (dismissed)
                continue;
            var markupString = new MarkupString(activeNotice.Message);

            <div class="alert alert-info" role="alert">
                <h4 class="alert-heading">@activeNotice.Title</h4>
                <p>@markupString</p>
                <button
                    type="button"
                    class="btn-close"
                    data-bs-dismiss="alert"
                    aria-label="Close"
                    onclick="document.cookie = `dismissed-notice-${@activeNotice.Id}=true; expires=Fri, 31 Dec 9999 23:59:59 GMT; path=/`;">
                </button>
            </div>
        }

        @if (_user.Identity.IsAuthenticated)
        {
            @if (_account is { Protected: true })
            {
                <div class="alert alert-warning" role="alert">
                    <h4 class="alert-heading">NOTICE</h4>
                    <p>Your account is set as protected. Your redaction settings were automatically set to true, in order to prevent harassment or similar. Contact the site operator to remove your protection status.</p>
                </div>
            }

            <p id="logged-in-text">Hello <strong>@_user.Claims.Single(c => c.Type == "name").Value!</strong></p>

            <a href="/account/logout" class="btn btn-primary" style="margin-right: 10px">Logout</a>
            <a href="/account/manage" class="btn btn-primary" style="margin-right: 10px">Manage</a>
            <a href="/favourites" class="btn btn-primary" style="margin-right: 10px">Favourites</a>
            <a href="/favorites/profiles" class="btn btn-primary" style="margin-right: 10px">Watched profiles</a>

            @if (_account?.IsAdmin ?? false)
            {
                <a href="/favourites" class="btn btn-primary" style="margin-right: 10px">Admin</a>
                <a href="/favourites" class="btn btn-primary" style="margin-right: 10px">Manage notices</a>
            }
        }
        else
        {
            <a href="/account/login" class="btn btn-primary">Login via SS14</a>
        }

        <br/>
        <a href="/" class="btn btn-primary" style="margin-right: 10px; margin-top: 10px">Main page</a>
        <a href="/leaderboard" class="btn btn-primary" style="margin-right: 10px; margin-top: 10px">Leaderboard</a>
        <a href="/downloads" class="btn btn-primary" style="margin-right: 10px; margin-top: 10px">Current downloads</a>
        <a href="/changelog" class="btn btn-primary" style="margin-right: 10px; margin-top: 10px">Changelog</a>

        <p>Warning: Replays recorded before @ReplayParserService.CutOffDateTime.ToLocalTime().ToString("yyyy-MM-dd") (yyyy-MM-dd) are not supported and are not counted</p>

        <hr/>
        @Body
    </main>
</div>

<footer class="footer text-muted text-center">
    <div class="container">
        <p>Replay Browser is a project by Simyon and YuNii. Source code available on <a href="https://github.com/Simyon264/ReplayBrowser">GitHub</a>.</p>
    </div>

    <div class="container">
        <p><a href="/contact">Contact</a> | <a href="/privacy">Privacy Policy</a></p>
    </div>
</footer>

<script>
    const modalRoot = document.getElementById('modal-root');
    const pageRoot = document.querySelector('.page');

    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        modalRoot.appendChild(modal);
    });

    const observer = new MutationObserver(function(mutations) {
        const modals = document.querySelectorAll('.modal');
        modals.forEach(modal => {
            modalRoot.appendChild(modal);
        });
    });
    observer.observe(pageRoot, { childList: true, subtree: true });

    function FavouriteReplay(replayId, reloadOnComplete = false) {
        // If we are not logged in, we set href to /account/login
        if (document.getElementById('logged-in-text') == null) {
            window.location.href = '/account/login'; // horrible code
            return;
        }

        fetch(`/api/replay/favourite/${replayId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        }).then(response => {
            if (response.ok) {
                // the response is just a boolean, true if its now favourited, false if its not
                response.json().then(isFavourited => {
                    let button = $(`#favorite-button-${replayId}`)

                    // we can just get the first child because the button only has one child
                    // either <i class="fas fa-star"></i> or <i class="far fa-star"></i>
                    let icon = button.children().first();
                    if (isFavourited) {
                        icon.removeClass('far');
                        icon.addClass('fas');
                        button.children().last().text('Remove from favourites');
                    } else {
                        icon.removeClass('fas');
                        icon.addClass('far');
                        button.children().last().text('Add to favorites');
                    }

                    if (reloadOnComplete) {
                        location.reload();
                    }
                })
            }
        });
    }

</script>