@page "/player/{guid}"
@using Humanizer
@using Microsoft.AspNetCore.Components.Authorization
@using ReplayBrowser.Data
@using Microsoft.AspNetCore.Components.Web
@using ReplayBrowser.Data.Models
@using ReplayBrowser.Helpers
@using Serilog

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ReplayHelper ReplayHelper
@inject Ss14ApiHelper Ss14ApiHelper

@attribute [StreamRendering]

<PageTitle>Player info</PageTitle>

@if (_playerData is null)
{
    <p>Loading...</p>
}
else if (IsPrivate)
{
    <h1>Protected data (@Username)</h1>
    <p>@Exception.Message</p>
}
else if (FailedToLoad)
{
    <h1>Error (@Username)</h1>
    <p>Failed to load player data. Exception: @Exception.Message</p>
}
else
{
    <button class="btn btn-outline-danger" id="watchButton" onclick="Watch()">
        @if (_playerData.IsWatched)
        {
            <i class="fas fa-star"></i>
            <p>Un-watch</p>
        }
        else
        {
            <i class="far fa-star"></i>
            <p>Watch</p>
        }
    </button>

    <h1>@_playerData.PlayerData.Username</h1>

    <p><b>Total estimated playtime:</b> @_playerData.TotalEstimatedPlaytime.Humanize()</p>
    <p><small>Calculated by adding up the total time for each round played by the player.</small></p>
    <p><b>Total rounds played:</b> @_playerData.TotalRoundsPlayed</p>
    <p><b>Total antag rounds played:</b> @_playerData.TotalAntagRoundsPlayed</p>
    <p><b>Last seen:</b> @_playerData.LastSeen.Humanize()</p>

    <h2>Characters</h2>
    <table class="table">
        <thead>
        <tr>
            <th>Character Name</th>
            <th>Times played</th>
            <th>Last played</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var character in _playerData.Characters)
        {
            if (character.CharacterName == "Unknown")
            {
                character.CharacterName = "Spectator";
            }

            // If this character contains a paranthesis, it's likely a ghost role like mouse (253), so we'll skip it.
            if (character.CharacterName.Contains("("))
            {
                continue;
            }

            <tr>
                <td>@character.CharacterName</td>
                <td>@character.RoundsPlayed</td>
                <td>@character.LastPlayed.Humanize()</td>
            </tr>
        }
        </tbody>
    </table>
    <h2>Jobs</h2>
    <table class="table">
        <thead>
        <tr>
            <th>Job name</th>
            <th>Times played</th>
            <th>Last played</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var jobCountData in _playerData.JobCount)
        {
            if (jobCountData.JobPrototype == "Unknown")
            {
                continue;
            }

            <tr>
                <td>@jobCountData.JobPrototype</td>
                <td>@jobCountData.RoundsPlayed</td>
                <td>@jobCountData.LastPlayed.Humanize()</td>
            </tr>
        }
        </tbody>
    </table>

    <script>
        function Watch() {
            if ('@IsLoggedIn.ToString().ToLower()' === "false") {
                location.href = "/account/login";
                return
            }

            const button = document.getElementById("watchButton");
            const guid = "@Guid";
            let url = "/api/Replay/watch/" + guid;
            fetch(url, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                }
            }).then(response => {
                if (response.ok) {
                    response.text().then(text => {
                        if (text == 'false') {
                            button.innerHTML = "<i class='far fa-star'></i><p>Watch</p>";
                        } else {
                            button.innerHTML = "<i class='fas fa-star'></i><p>Un-watch</p>";
                        }
                    });
                }
            });
        }

    </script>
}

@code{
    [Parameter] public string Guid { get; set; } = string.Empty;

    private CollectedPlayerData? _playerData;
    private bool FailedToLoad { get; set; } = false;
    private Exception? Exception { get; set; }
    private bool IsPrivate { get; set; } = false;
    private bool IsLoggedIn { get; set; } = false;
    private string Username { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!System.Guid.TryParse(Guid, out var guidParsed))
            {
                FailedToLoad = true;
                Exception = new("Invalid GUID.");
                _playerData = new();
                return;
            }

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            if (authState.User.Identity?.IsAuthenticated == true)
            {
                IsLoggedIn = true;
            }

            var playerData = await Ss14ApiHelper.FetchPlayerDataFromGuid(System.Guid.Parse(Guid));
            if (playerData != null)
            {
                Username = playerData.Username;
            } else
            {
                Username = "Unknown";
            }

            Guid = guidParsed.ToString();
            _playerData = await ReplayHelper.GetPlayerProfile(guidParsed, authState);
            _playerData.Characters = _playerData.Characters.OrderByDescending(x => x.RoundsPlayed).ThenByDescending(x => x.LastPlayed).ToList();
            _playerData.JobCount = _playerData.JobCount.OrderByDescending(x => x.RoundsPlayed).ThenByDescending(x => x.LastPlayed).ToList();
        }
        catch (UnauthorizedAccessException e)
        {
            FailedToLoad = true;
            IsPrivate = true;
            Exception = e;
            _playerData = new();
        }
        catch (Exception e)
        {
            FailedToLoad = true;
            Exception = e;
            _playerData = new();
            Log.Error(e, "Failed to load player data.");
        }
    }
}