@page "/replay/{id}"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web
@using ReplayBrowser.Data.Models
@using ReplayBrowser.Helpers
@using ReplayBrowser.Pages.Shared
@using ReplayBrowser.Services.ReplayParser

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ReplayHelper ReplayHelper
@inject ReplayParserService ReplayParserService

<PageTitle>Replay viewer</PageTitle>
@if (Replay == null && !IsLoading)
{
    <p>Replay not found</p>
}
else if (IsLoading)
{
    <p>Loading...</p>
}
else
{
    <ReplayDetails FullReplay="Replay" />
    
    <MetaDataSpecifer
        Title="@GetTitle()"
        Description="@GetDescription()"
    />
}

@code {
    [Parameter] public string Id { get; set; }
    public Replay? Replay { get; set; }
    public bool IsLoading { get; set; } = true;

    private string GetTitle()
    {
        var fileName = Path.GetFileName(Replay.Link);
        var storageUrl = ReplayParserService.GetStorageUrlFromReplayLink(Replay.Link);
        var matchName = storageUrl.ServerNameRegexCompiled.Match(fileName);
        var matchDate = storageUrl.ReplayRegexCompiled.Match(fileName);
        
        var nameFormatted = "";
        var dateFormatted = "";
        
        if (matchName.Success && matchDate.Success)
        {
            nameFormatted = $"{matchName.Groups[1].Value} - {matchDate.Groups[1].Value.Replace("_","-")}";
            dateFormatted = matchDate.Groups[1].Value.Replace("_", "-");
            if (string.IsNullOrWhiteSpace(matchName.Groups[1].Value))
            {
                nameFormatted = $"{Replay.ServerId} - {matchDate.Groups[1].Value}";
            }
            else
            {
                nameFormatted = $"{matchName.Groups[1].Value} - {matchDate.Groups[1].Value}";
            }
        }
        else
        {
            nameFormatted = Replay.ServerName ?? Replay.ServerId;
        }
        
        return $"Round {Replay.RoundId} - {nameFormatted}";
    }
    
    private string GetDescription()
    {
        return "Round " + Replay.RoundId + " played on " + Replay.Map + " on " + Replay.Date?.ToString("yyyy-MM-dd HH:mm:ss");
    }
    
    protected override async Task OnInitializedAsync()
    {
        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Replay = await ReplayHelper.GetReplay(Convert.ToInt32(Id), authstate)!;
        IsLoading = false;
    }
}